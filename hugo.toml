baseURL = 'https://george.chemmala.com'
languageCode = 'en-us'
title = 'George Chemmala'
theme = ['typo']

# Google analytics code
googleAnalytics = "G-xxxxxxxxx"

[taxonomies]
tag = 'tags'

[params]
# Meta description
description = "George Chemmala's Personal Website"

# Appearance settings
theme = 'auto'
colorPalette = 'default'
hideHeader = false

# Intro on main page, content is markdown
homeIntroTitle = '''
Hi there <span class="wave-hand" style="display:inline-block; transition: transform 0.2s; cursor:pointer;">ðŸ‘‹</span>
<style>
.confetti-piece {
    position: fixed;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    pointer-events: none;
    z-index: -1;
    opacity: 0.8;
}
.thank-you {
    position: fixed;
    left: 50%;
    top: 85%;
    transform: translate(-50%, -50%);
    background-color: inherit;
    color: inherit;
    padding: 7.5px 15px;
    border-radius: 8px;
    z-index: 999;
    font-size: 1em;
    text-align: center;
    pointer-events: none;
    opacity: 0;
    animation-name: thank-you-fade;
    animation-duration: 1.5s;
    animation-timing-function: ease-in-out;
}

@keyframes thank-you-fade {
    0% { opacity: 0; }
    15% { opacity: .95; }
    85% { opacity: .95; }
    100% { opacity: 0; }
}
.wave-hand {
    display: inline-block;
    transition: transform 0.2s;
    cursor: pointer;
}
.wave-hand:hover {
    animation-name: wave-animation;
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
}
.wave-hand.waving {
    animation-name: wave-animation;
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
}
@keyframes wave-animation {
    0% { transform: rotate(0deg);}
    30% { transform: rotate(-10deg);}
    70% { transform: rotate(10deg);}
    100% { transform: rotate(0deg);}
}
</style>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const hand = document.querySelector('.wave-hand');
    let timeout;
    hand.classList.add('waving');
    setTimeout(() => {
        hand.classList.remove('waving');
    }, 1000);
    hand.addEventListener('mouseenter', function() {
        hand.classList.add('waving');
        clearTimeout(timeout);
    });
    hand.addEventListener('mouseleave', function() {
        timeout = setTimeout(() => {
            hand.classList.remove('waving');
        }, 1000);
    });
    hand.addEventListener('animationend', function() {
        hand.classList.remove('waving');
    });

    hand.addEventListener('click', function(e) {
        launchConfetti(e.clientX, e.clientY);
    });

    function launchConfetti(x, y) {
        const colors = ['#ff595e', '#ffca3a', '#8ac926', '#1982c4', '#6a4c93', '#fff', '#f72585', '#b5179e'];
        const count = 30;
        for (let i = 0; i < count; i++) {
            const conf = document.createElement('div');
            conf.className = 'confetti-piece';
            conf.style.background = colors[Math.floor(Math.random() * colors.length)];
            conf.style.left = (x - 4) + 'px';
            conf.style.top = (y - 4) + 'px';
            conf.style.pointerEvents = 'none';
            document.body.appendChild(conf);

            const angle = Math.random() * 2 * Math.PI;
            const distance = 80 + Math.random() * 80;
            const dx = Math.cos(angle) * distance;
            const dy = Math.sin(angle) * distance;
            const rotate = Math.random() * 360;

            const animation = conf.animate([
                { transform: `translate(0,0) rotate(0deg)`, opacity: 1 },
                { transform: `translate(${dx}px,${dy}px) rotate(${rotate}deg)`, opacity: 0 }
            ], {
                duration: 900 + Math.random() * 600,
                easing: 'cubic-bezier(.62,.01,.5,1)'
            });

            animation.onfinish = () => conf.remove();
            // Fallback in case animationend doesn't fire
            setTimeout(() => conf.remove(), 2000);
        }

        // Thanks for not leaving me hanging!
        const thankYou = document.createElement('div');
        thankYou.className = 'thank-you';
        thankYou.textContent = 'don\'t leave me hanging! :D';
        document.body.appendChild(thankYou);
        setTimeout(() => thankYou.remove(), 1500);
    }
});
</script>
'''
homeIntroContent = '''
I'm a junior at Brown University studying Computer Science and Mathematics, with current interests in cryptography, deep learning, and formal proof verification.

Check out my projects below, but also take a look at some of my [other](/other) stuff
<br>
<a href="#" id="feeling-lucky-link" style="color: var(--bg);">I'm feeling lucky</a>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const luckyLink = document.getElementById('feeling-lucky-link');
    if (luckyLink) {
        luckyLink.addEventListener('click', async function(event) {
            event.preventDefault();
            try {
                const res = await fetch('/sitemap.xml');
                const text = await res.text();
                const parser = new DOMParser();
                const xml = parser.parseFromString(text, 'application/xml');
                const urls = Array.from(xml.querySelectorAll('url > loc'))
                    .map(loc => new URL(loc.textContent).pathname)
                    .filter(path => path !== '/google21d0060bd8dc65b8/')
                    .filter(path => path !== '/yo/')
                    .filter(path => !path.startsWith('/experiments/'))
                    .filter(path => !path.startsWith('/tags/'))
                    .filter(path => path !== window.location.pathname);
                if (urls.length) {
                    window.location = urls[Math.floor(Math.random() * urls.length)];
                }
            } catch (e) {
                alert('Could not fetch random page.');
            }
        });
    }
});
</script>
<!-- <a href="#" id="feeling-lucky-link" style="background-color: var(--bg); padding: 2px 6px; border-radius: 4px;">I'm feeling lucky</a> -->
'''

# # Collection to display on home
# homeCollectionTitle = 'Projects'
# homeCollection = 'projects'

# Collection to display on home
homeSections = ['projects', 'other']

# Lists parameters
paginationSize = 100
listSummaries = true
listDateFormat = '2 Jan 2006'

# Breadcrumbs
[params.breadcrumbs]
enabled = true
showCurrentPage = true
home = "~"

# Social icons
[[params.social]]
name = "github"
url = "https://github.com/Geoc2022"

[[params.social]]
name = "email"
url = "mailto:george_chemmala@brown.edu"

# Main menu pages
# [[params.menu]]
# name = "home"
# url = "/"

[[params.menu]]
name = "projects"
url = "/projects"

[[params.menu]]
name = "other"
url = "/other"

[[params.menu]]
name = "utils"
url = "/utils"

[[params.about]]
name = "whoami"
url = "/whoami"

# Syntax highlight on code blocks
[markup]
[markup.highlight]
style = 'arduino'

# Giscus comments
[params.giscus]
enable = false
repo = "user/repo"
repoid = "repoId"
category = "General"
categoryid = "categoryId"
mapping = "pathname"
theme = "preferred_color_scheme"

[markup.goldmark.renderer]
unsafe = true
